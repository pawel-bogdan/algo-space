# Kategoria - Tablice
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (1, 'Najkrótszy wyraz', '<div class="task-explanation">    <p>        Znajdź najkrótszy wyraz w tablicy o N elementach.        Jeśli występuje więcej niż jeden taki wyraz, zwróć ten, który wystąpił w tablicy jako pierwszy.    </p>    <div class="example">        Przykładowo dla <span class="example-code">words = ["Michał", "Ala", "kawaleria", "mucha"]</span>        <br>        program powinien zwrócić <span class="example-code">"Ala"</span>.    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                words jest niepustą tablicą tzn. N jest liczbą w zakresie [1, 100000]            </li>            <li>                Wszystkie elementy tablicy mają wartość (nie są nullami).            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Paweł Bogdan</div>    </div></div>','to sie dorzuci', 0, 0);
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (2, 'Największa w tablicy', '<div class="task-explanation">    <p>        Znajdź największą liczbę w tablicy o rozmiarze N.    </p>    <div class="example">        Przykładowo dla <span class="example-code">numbers = [0, -2, 33, 18, 28, -4]</span>        <br>        program powinien zwrócić <span class="example-code">33</span>.    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                N jest liczbą z zakresu [1, 100000]            </li>            <li>                Wszystkie elementy tablicy mają wartość (nie są nullami).            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Paweł Bogdan</div>    </div></div>','to sie dorzuci', 0, 0);
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (3, 'Powtórzenia w tablicy', '<div class="task-explanation">    <p>        Znajdź wszystkie liczby, które występują w obu tablicach.    </p>    <div class="example">        Przykładowo dla <span class="example-code">array1 = [1, 0, 1, 4, 19, 0, 8], array2 = [15, 1, -9, 8, 31, 5]</span>        <br>        program powinien zwrócić <span class="example-code">[1, 8]</span>.    </div>    <div class="example">        Przykładowo dla <span class="example-code">array1 = [2, 1], array2 = [4, 0, 4]</span>        <br>        program powinien zwrócić <span class="example-code">[]</span>.    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                N jest liczbą w zakresie [1, 100000]            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Dominik Omański</div>    </div></div>','to sie dorzuci', 0, 0);
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (4, 'Różnica tablic', '<div class="task-explanation">    <p>        Znajdź wszystkie liczby, które występują w obu tablicach.    </p>    <div class="example">        Przykładowo dla <span class="example-code">array1 = [1, 0, 1, 4, 19, 0, 8], array2 = [15, 1, -9, 8, 31, 5]</span>        <br>        program powinien zwrócić <span class="example-code">[1, 8]</span>.    </div>    <div class="example">        Przykładowo dla <span class="example-code">array1 = [2, 1], array2 = [4, 0, 4]</span>        <br>        program powinien zwrócić <span class="example-code">[]</span>.    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                N jest liczbą w zakresie [1, 100000]            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Dominik Omański</div>    </div></div>','to sie dorzuci', 0, 0);
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (5, 'Rotacja tablicy', '<div class="task-explanation">    <p>        Rotacja tablicy.        Wykonaj rotację podanej tablicy o wartość K podaną w argumencie funkcji. Przez rotację tablicy o wartość K = 1 rozumiemy przesunięcie każdego elementu tablicy o jedną pozycję do przodu, przy czym ostatni element tablicy przechodzi na jej początek.    </p>    <div class="example">        Przykładowo dla <span class="example-code">array = [1, 2, 3, 4, 5]</span> oraz <span class="example-code">K = 3</span>        <br>        program powinien zwrócić <span class="example-code">[3, 4, 5, 1, 2]</span>.    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                K jest liczbą nieujemną tzn. K jest z zakresu [0, 100000]            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Paweł Bogdan</div>    </div></div>','to sie dorzuci', 0, 1);
# Kategoria - Stosy
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (6, 'Zagnieźdźenia', '<div class="task-explanation">    <p>        Zagnieżdżenia        Na wejściu podane jest wyrażenie składające się z nawiasów trzech rodzajów: {},(),[]. Sprawdź czy każdy z nawiasów jest odpowiednio zamknięty, a całe wyrażenie jest poprawne.    </p>    <div class="example">        Przykładowo dla <span class="example-code">word = "{{()}}"</span>        <br>        program powinien zwrócić <span class="example-code">true</span>.    </div>    <div class="example">        Przykładowo dla <span class="example-code">word = "{[{()}}]"</span>        <br>        program powinien zwrócić <span class="example-code">false</span>.    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                word jest niepustym słowem            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Paweł Bogdan</div>    </div></div>','to sie dorzuci', 2, 1);
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (7, 'Wieża Hanoi', '<div class="task-explanation">    <p>        Wieża Hanoi        Wieża Hanoi to zagadka matematyczna. Składa się z trzech kijków i kilku krążków o różnych rozmiarach, które można nasunąć na dowolne kijki. Układanka zaczyna się od ułożonych na pierwszym kijku krążków ułożonych patrząc od góry od najmniejszego do największego. Celem łamigłówki jest przeniesienie wszystkich dysków z pierwszego kijka na inny tak aby były ustawione w taki sam sposób jak na początku gry.        Przy czym należy zachować następujące zasady:        1. Nie można umieścić większego krążka na mniejszym.        2. Jednocześnie można przenosić tylko jeden krążek        Na wyjściu algorytm powinien zwrócić tablicę par indeksów. W każdej z par należy na pierwszej pozycji zapisać numer kijka (1,2 lub 3), z którego zdjęty został dysk, a na drugiej pozycji numer kijka, na który dysk został przeniesiony. Przykładowy element tablicy: „1,2”    </p>    <div class="example">        ...    </div>    <div class="example">        ..    </div>    <div class="assumptions">        Możesz przyjąć następujące założenia:        <ul>            <li>                Dominiczke zrobi do tego kiedys fajne testy            </li>        </ul>    </div>    <div class="footer">        <div>algo-space</div>        <div class="author">Dominiczke Omański</div>    </div></div>','to sie dorzuci', 2, 1);
# Kategoria - Rekurencja
INSERT INTO task(id, name, content, expected_output, category, difficulty) VALUES (8, 'Wieża Hanoi', '','to sie dorzuci', 2, 1);


INSERT INTO application_users(email, points) VALUES ('pelo', 10);