INSERT INTO hint(id, content, level, task_id) VALUE (1, 'Dobrym pomysłem może okazać się użycie pętli for.', 1, 1);
INSERT INTO hint(id, content, level, task_id) VALUE (2, 'Użyj zmiennej, w której będziesz zapisywał najkrótszy wyraz spośród zbadanych do aktualnej iteracji.', 2, 1);
INSERT INTO hint(id, content, level, task_id) VALUE (3, 'Dobrym pomysłem może okazać się użycie pętli for.', 1, 2);
INSERT INTO hint(id, content, level, task_id) VALUE (4, 'Użyj zmiennej, w której będziesz zapisywał największą liczbę spośród zbadanych do aktualnej iteracji.', 2, 2);
INSERT INTO hint(id, content, level, task_id) VALUE (5, 'Pętla dwuwymiarowa może okazać się pomocna.', 1, 3);
INSERT INTO hint(id, content, level, task_id) VALUE (6, 'Stwórz pustą strukturę danych, do której będziesz zapisywał elementy spełniające warunek podany w treści zadania.', 2, 3);
INSERT INTO hint(id, content, level, task_id) VALUE (7, 'Dobrym pomysłem może okazać się użycie pętli for.', 1, 4);
INSERT INTO hint(id, content, level, task_id) VALUE (8, 'Stwórz pustą tablicę, do której będziesz zapisywał otrzymane wyniki.', 2, 4);
INSERT INTO hint(id, content, level, task_id) VALUE (9, 'Użyj operatora modulo.', 1, 5);
INSERT INTO hint(id, content, level, task_id) VALUE (10, 'Stwórz pustą tablicę, do której będziesz zapisywał elementy na odpowiednich pozycjach.', 2, 5);
INSERT INTO hint(id, content, level, task_id) VALUE (11, 'Zbadaj, czy można bezbłędnie umieścić oraz zdjąć ze stosu wszystkie zagnieżdżenia.', 1, 6);
INSERT INTO hint(id, content, level, task_id) VALUE (12, 'Możesz bliżej zapoznać się z problemem tutaj: https://www.geeksforgeeks.org/iterative-tower-of-hanoi/', 1, 7);
INSERT INTO hint(id, content, level, task_id) VALUE (13, 'Pamiętaj o tym, aby obsłużyć przypadek w którym jedna z liczb podanych na wejściu jest zerem.', 1, 8);
INSERT INTO hint(id, content, level, task_id) VALUE (14, 'Napisanie funkcji obliczjącej NWD liczb podanych na wejściu może okazać sie pomocne.', 2, 8);
INSERT INTO hint(id, content, level, task_id) VALUE (15, 'Spróbuj użyć algorytmu Euklidesa.', 1, 9);
INSERT INTO hint(id, content, level, task_id) VALUE (16, 'Możesz ostatecznie użyć metody brute force - przeszukaj wszystkie możliwe opcje.', 2, 9);
INSERT INTO hint(id, content, level, task_id) VALUE (17, 'Pamiętaj o tym, aby oddzielnie obsłużyć pierwsze dwa elementy ciągu.', 1, 10);
INSERT INTO hint(id, content, level, task_id) VALUE (18, 'Użycie mapy do kumulowania liczby wystąpień danego znaku może okazać się pomocne.', 1, 11);
INSERT INTO hint(id, content, level, task_id) VALUE (19, 'Pamiętaj aby sprawdzić, który spośród znaków jakie pojawiły się najczęściej znajduję się w ciągu jako pierwszy.', 2, 11);
INSERT INTO hint(id, content, level, task_id) VALUE (20, 'Zlicz ile razy każdy znak pojawił się w ciągu podanym na wejściu.', 1, 12);
INSERT INTO hint(id, content, level, task_id) VALUE (21, 'Sprawdź ile "sztuk" danej litery jest potrzebnych do ułożenia słowa kaktus.', 2, 12);
INSERT INTO hint(id, content, level, task_id) VALUE (22, 'Odwrócenie ciągu podanego na wejściu przybliży cię do rozwiązania problemu.', 1, 13);
INSERT INTO hint(id, content, level, task_id) VALUE (23, 'Możesz zmienić ciąg w tablicę znaków.', 1, 14);
INSERT INTO hint(id, content, level, task_id) VALUE (24, 'Zamień ciąg w tablicę znaków.', 2, 15);
INSERT INTO hint(id, content, level, task_id) VALUE (25, 'Użyj zmiennej, w której będziesz zapisywał najdłuższy taki ciąg do aktualnej iteracji.', 1, 15);
INSERT INTO hint(id, content, level, task_id) VALUE (26, 'Zamień ciąg w tablicę znaków.', 2, 16);
INSERT INTO hint(id, content, level, task_id) VALUE (27, 'Użyj mapy w której zapiszesz ile razy dany znak wystapił w podanym ciągu.', 1, 16);
INSERT INTO hint(id, content, level, task_id) VALUE (28, 'Pamiętaj aby oddzielnie obsłużyć ostatni element tablicy podanej na wejściu.', 1, 17);
INSERT INTO hint(id, content, level, task_id) VALUE (29, 'Możesz spróbować rozwiązać ten problem używając dwuwymiarowej pętli for.', 1, 18);
INSERT INTO hint(id, content, level, task_id) VALUE (31, 'Możesz spróbować rozwiązać ten problem używając rekurencji.', 2, 18);
INSERT INTO hint(id, content, level, task_id) VALUE (32, 'Zapisz wszystkie rzymskie liczby i ich arabskie odpowiedniki w tablicach.', 1, 19);
INSERT INTO hint(id, content, level, task_id) VALUE (33, 'Mapuj cyfry rzymskie podane na wejściu na ich arabskie odpowiedniki od początku ciągu.', 2, 19);
INSERT INTO hint(id, content, level, task_id) VALUE (34, 'Zapisz w tablicach wszystkie możliwości zapisu jedności, dziesiątek, setek i tysięcy w postaci liczb rzymskich.', 1, 20);
INSERT INTO hint(id, content, level, task_id) VALUE (35, 'Oblicz jendości, dziesiątki, setki i tysiące w podanej na wejściu liczbie.', 2, 20);
INSERT INTO hint(id, content, level, task_id) VALUE (36, 'Posortuj wejściową tablicę.', 1, 21);
INSERT INTO hint(id, content, level, task_id) VALUE (37, 'Użyj pętli for, aby znaleźć której liczby brakuje.', 2, 21);
INSERT INTO hint(id, content, level, task_id) VALUE (38, 'Zapoznaj się z definicją wyszukiwania binarnego: https://pl.wikipedia.org/wiki/Wyszukiwanie_binarne.', 1, 22);
INSERT INTO hint(id, content, level, task_id) VALUE (39, 'Posortuj tablicę wejściową.', 1, 23);
INSERT INTO hint(id, content, level, task_id) VALUE (40, 'Zbadaj różnicę między kolejnymi parami liczb występującymi w posortowanej tablicy.', 2, 23);
INSERT INTO hint(id, content, level, task_id) VALUE (41, 'Użyj pętli for wypisującej pod pewnymi warunkami symbole *.', 1, 24);
INSERT INTO hint(id, content, level, task_id) VALUE (42, 'Użyj mapy, w której zapiszesz ile razy wystąpiła dana liczba.', 1, 25);
